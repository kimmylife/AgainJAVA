자바의 기본구조 
- 프로젝트
- 패키지
- 클래스(앞 글자가 대문자)
- 메소드(이름 뒤에 소괄호)
- 소스코드

컴파일 후 실행 
(Command+ Shift + Fn + F11)

컴파일러 해석 방향
- 위에서 아래로, 좌에서 우로 해석

출력메소드
- 어디가 오류인지를 캐치할때 씀(오류 구체화)
- 개발자를 위한 도구
- print()
- println()
- printf()

한줄복사 
- command + option + 위아래 방향키

제어문자
- 반드시 따옴표 안에서 작성


변수 
- 저장공간

자료형(type, 종류)


RAM(메모리)
- int x = 10;
- x라는 이름의 저장 공간이 RAM에 할당되고 10이라는 값이 들어간다.


주소 
- int x = 10;
- x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
- 계속 실행되고 종료되는 프로그램이 있기 떄문에, 주소값이 변경될 수 있으나 중복은 없다


변수의 선언
- 자료형 변수명 = 초기값;


변수선언시 주의사항
- 같은 이름의 변수로 선언할 수 없다
- 초기화를 해준다
- 되도록 선언부에 한꺼번에 선언한다.(영역상단)



변수명 주의사항
- 문자로 시작해야한다.
- 특수문자는 사용할 수 없다. 단 _는 허용
- 되도록 변수 이름은 소문자로 시작한다.
- 공백을 사용할 수 없다
- good_boy 닷홀표기법, 언더바 표기법
- goodDay 카멜표기법
- 명사로 사용한다. 
- 뜻이 있는 단어를 사용한다.


변수의 사용
- 선언된 변수를 사용할 때에는 변수이름을 사용한다
	int x = 10; //저장공간
	x = 10;     //저장공간
	x = x + 9;  //저장공간, 값
	x + 9;	    //값



변수를 사용하는 이유
- 반복되는 값을 쉽게 관리할 수 있다. 
- 의미가 없는 값을 하나의 정보로 만들기 위해서 사용한다.


서시문자 (format)
- 반드시 따옴표 안에서 작성해야 한다. 
- %d : decimal(정수) - 10진수 정수
- %f : float(실수)
- %c : character(문자)
- %s : string(문자열)


출력메소드 
- printf() : 서식문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈 되지 않는다. 


상수(항상 그대로인 수)
- 값을 변경할 수 없도록 한다.
- final 자료형 상수명 = 값;
- 상수명은 반드시 대문자로 작성한다. 


형변환
- 자동형변환
	정수 + 정수 = 정수
	정수 + 실수 = 실수
	3 + 0.0 = 3.0
	문자 + 정수 = 정수
	

- 강제형변환
	(자료형)값
	(double)3 == 3.0


- 문자열 형변환
1. 다른 자료형을 문자열로
	문자열과 다른 자료형을 연결하면 결과는 항상 문자열이 된다.

2. 문자열을 다른 자료형으로 
	일반 자료형은 일반 자료형끼리 형변환이 되고,
	클래스 타입은 클래스 타입끼리 형변환이 된다. 
	따라서 문자열을 정수, 실수로 변환하기 위해서는 
	Integer, Double 등의 클래스 안에 있는 메소드	
	를 사용해야 한다. 	
	parseInt(문자열), parseDouble(문자열)





입력 
- 커서가 깜빡이고 있는 상태
- 입력하기 전에 출력을 통해 어떤 값을 입력해야 하는지 사용자에게 알려주어야 한다. 

입력클래스
- Scanner sc = new Scanner(System.in);
- String name = "유기현";


입력메소드(콘솔창에 커서를 깜빡여줌)
- next() : 사용자가 입력한 문자열 값
	사용자가 입력한 값 중 공백 또는 줄바꿈 문자(엔터		
	를 구분점으로 각 문자열을 분리한다.
	첫 번째 문자열을 첫번째 next()에 담고, 
	두번째 문자열을 두번째 next()에 담는다 


- nextLine() : 사용자가 입력한 문자열의 값
		공백또는 줄바꿈 문자도 값으로 취급하기 				
		때문에 그대로 입력받는다.



연산자
	기능이 있는 특수문자

연산자의 우선순위
	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

연산자의 결합성
	하나의 수식에 동일한 연산자가 여러 개 사용되면
	알맞은 방향으로 결합되어 연산되는 성질


비트 연산

 논리 연산자
- & (AND, 논리곱), A & B 두 비트 모두 1이면 1
- | (OR, 논리합), A | B 둘 중 하나라도 1이면 1
- ^ (XOR, 배타 논리합), A ^ B 두 비트가 서로 다르면 1

단항 연산자
-  ~(NOT, 논리부정) : ~A, 0을 1로, 1을 0으로 변경
	[~a = -a-1]공식
	부호비트 : 비트의 최상위 비트를 부호비트로 사용하고,
		0은 양수 1은 음수를 의미한다

쉬프트 연산자
- <<(LEFT SHIFT, 좌시프트) : A << B, A를 B만큼 좌로 비트이동
- >>(RIGHT SHIFT, 우쉬프트) : A >> B, A를 B만큼 우로 비트이동
- 비트가 넘어가면 잘리고, 빈 칸은 0으로 채워진다 (음수는 1로 채워짐)



-----------------------------------------------

조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식
	참 또는 거짓 값

참과 거짓
	참 : true
	거짓 : false
	
논리형
	boolean  1byte  true/false

조건식에서 사용되는 연산자
- 관계 연산자
	== : 같다
	=! : 같지 않다
	>, < : 초과, 미만
	>=, <= : 이상, 이하
	
- 논리 연산자 : 두 개 이상의 조건식을 연결해 줄 때
	&&(AND) : A && B, 두 조건식이 모두 참일 때 참
	||(OR): A || B, 두 조건식 중 하나라도 참이면 참

- 단항 연산자 
	!(NOT) : !A, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경

-  삼항 연산자(통채로를 값으로 봐야 한다)

	?: 
	조건식 ? 참 : 거짓

	10 > 9 ? 10 : 9 --> 10
	int result = 10 > 9 ? 10 : 9;
	단, 참과 거짓 자리에는 값만 작성할 수 있다. 

- 삼항연산자를 사용하는 이유
하나의 조건식의 참, 거짓의 판별을 위해 사용한다. 

-----------------------------------------------------------------

제어문

- 조건문
1. if문
	if(조건식){
		실행할 문장;
	}위의 조건식에 상관없이 무조건 모두 검사
	if(조건식){
		실행할 문장;
	}if(조건식){
		실행할 문장;
	}
	
*********************************************

	if(조건식){
		실행할 문장;
	}위의 조건식이 참이면 검사하지 않고, 거짓일때만 검사
	else if(조건식){
		실행할 문장;
	}else {
		실행할 문장;
	}

*********************************************
2. switch문
	switch(변수명){
	case 값 1 :
		실행할 문장;
	case 값 2 : 
		실행할 문장;
	case 값 3: 	
		실행할 문장;
	case 값 4 : 
		실행할 문장;
	...
	default : 
}

*********************************************
- 반복문
































